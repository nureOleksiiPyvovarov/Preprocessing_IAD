{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-4.09128985e-01  3.69838407e-01 -7.96336427e-01 -8.37072473e-01]\n",
      " [-4.46561136e-01 -2.89883681e-02 -7.38547899e-01 -9.18485270e-01]\n",
      " [-5.15310891e-01  1.46008290e-01 -7.29732627e-01 -9.30783705e-01]\n",
      " [-5.52203163e-01  5.75686042e-02 -6.35704030e-01 -8.98008646e-01]\n",
      " [-4.49347085e-01  4.54563408e-01 -7.80795154e-01 -8.36185824e-01]\n",
      " [-3.00410805e-01  6.96642961e-01 -7.50622348e-01 -6.58341897e-01]\n",
      " [-5.21729699e-01  3.16668585e-01 -6.42392951e-01 -7.86905345e-01]\n",
      " [-4.42979072e-01  2.87299209e-01 -7.40577920e-01 -8.31970089e-01]\n",
      " [-5.84268651e-01 -1.19626216e-01 -5.84362104e-01 -8.17215474e-01]\n",
      " [-4.89734878e-01  3.84191322e-02 -7.31414048e-01 -9.04475835e-01]\n",
      " [-3.34827219e-01  5.28662220e-01 -8.54626249e-01 -8.67334727e-01]\n",
      " [-5.17890488e-01  2.97407371e-01 -6.75886628e-01 -8.18033287e-01]\n",
      " [-5.01518584e-01 -3.62211427e-02 -7.27116815e-01 -8.91440943e-01]\n",
      " [-6.38743780e-01 -1.66159883e-02 -6.90630749e-01 -8.24085204e-01]\n",
      " [-1.86514963e-01  7.66734274e-01 -1.02783485e+00 -9.33439442e-01]\n",
      " [-2.36356955e-01  1.04933595e+00 -8.65510733e-01 -7.09914408e-01]\n",
      " [-2.57187788e-01  6.93852622e-01 -8.37986517e-01 -6.67182601e-01]\n",
      " [-3.67432822e-01  4.04672739e-01 -7.80045581e-01 -7.45538433e-01]\n",
      " [-2.41890418e-01  5.00334756e-01 -7.74405054e-01 -7.72603540e-01]\n",
      " [-4.06184958e-01  6.25264556e-01 -7.63603934e-01 -7.50028685e-01]\n",
      " [-3.36120334e-01  2.02261640e-01 -7.22522134e-01 -8.25969066e-01]\n",
      " [-3.60718623e-01  5.88978529e-01 -7.57038440e-01 -6.78316164e-01]\n",
      " [-5.33102940e-01  5.97291841e-01 -8.97844585e-01 -8.56766705e-01]\n",
      " [-2.95962440e-01  2.76642819e-01 -6.46501862e-01 -5.71915684e-01]\n",
      " [-5.49075598e-01  3.02464403e-01 -6.13669731e-01 -8.26983387e-01]\n",
      " [-4.14702641e-01 -1.95698865e-02 -7.02221608e-01 -8.20695120e-01]\n",
      " [-3.68677195e-01  3.36224675e-01 -6.73153785e-01 -6.37576706e-01]\n",
      " [-3.88700953e-01  3.55595989e-01 -7.85982726e-01 -8.44353795e-01]\n",
      " [-3.68017936e-01  2.80739456e-01 -8.05978030e-01 -8.36287130e-01]\n",
      " [-5.26205191e-01  1.69245506e-01 -6.64306272e-01 -7.98155002e-01]\n",
      " [-4.88803998e-01  7.12180267e-02 -6.70309223e-01 -7.94274811e-01]\n",
      " [-2.35523152e-01  2.89359050e-01 -7.57610139e-01 -6.60592525e-01]\n",
      " [-4.78426915e-01  8.27087177e-01 -8.54653755e-01 -9.79444064e-01]\n",
      " [-3.43863412e-01  8.59217134e-01 -8.91933479e-01 -8.83439250e-01]\n",
      " [-4.51110475e-01  1.04246265e-01 -7.36901850e-01 -8.26201170e-01]\n",
      " [-3.93695836e-01  1.83791307e-01 -8.32000429e-01 -8.17808232e-01]\n",
      " [-2.66413501e-01  3.08900320e-01 -8.75700507e-01 -8.55868237e-01]\n",
      " [-5.20626901e-01  4.55243071e-01 -7.97789211e-01 -9.15488393e-01]\n",
      " [-5.82373304e-01  1.43183921e-01 -7.34773706e-01 -7.91892363e-01]\n",
      " [-4.10693899e-01  2.87015736e-01 -7.64031365e-01 -8.31814512e-01]\n",
      " [-3.90849825e-01  4.18678857e-01 -7.85383046e-01 -7.16244486e-01]\n",
      " [-4.54414488e-01 -4.72240955e-01 -6.30461157e-01 -6.01502136e-01]\n",
      " [-6.24461565e-01  2.34107553e-01 -6.83867749e-01 -7.12060571e-01]\n",
      " [-3.27933430e-01  4.28057353e-01 -6.05216098e-01 -3.89347264e-01]\n",
      " [-4.11549775e-01  6.19222763e-01 -6.28417679e-01 -6.64943311e-01]\n",
      " [-4.47334601e-01 -1.68884355e-02 -6.66949665e-01 -6.39955295e-01]\n",
      " [-4.47822449e-01  6.11701828e-01 -7.68790804e-01 -8.64561384e-01]\n",
      " [-5.70167068e-01  1.53115564e-01 -6.74286248e-01 -7.28913945e-01]\n",
      " [-3.58173850e-01  5.24736505e-01 -8.25192450e-01 -8.85196197e-01]\n",
      " [-4.30344052e-01  2.13672602e-01 -7.61899038e-01 -8.01077238e-01]\n",
      " [ 3.89135651e-01  5.15619256e-02  6.22265365e-02 -5.45103906e-02]\n",
      " [ 2.08257969e-01  9.50217590e-02  1.68086608e-01  1.84779269e-01]\n",
      " [ 3.42690016e-01 -2.45232729e-02  1.85461652e-01  8.89174685e-02]\n",
      " [-3.50927431e-02 -6.00465549e-01  2.03664932e-01  1.77195158e-01]\n",
      " [ 2.58389804e-01 -2.54934903e-01  2.09864047e-01  1.93281631e-01]\n",
      " [-6.65748240e-02 -2.10380814e-01  2.60861614e-01  9.10531425e-02]\n",
      " [ 1.77941365e-01  1.78281730e-01  2.65721948e-01  2.92552381e-01]\n",
      " [-2.76153701e-01 -4.65193472e-01  2.50044817e-02 -2.40490981e-02]\n",
      " [ 2.01661209e-01 -2.39060087e-01  1.47636799e-01 -2.88156990e-02]\n",
      " [-1.00836185e-01 -2.04548062e-01  2.11807141e-01  2.86341653e-01]\n",
      " [-2.02323080e-01 -7.65137439e-01  5.07009915e-02 -8.07124255e-02]\n",
      " [ 9.43905101e-02 -4.03492709e-03  1.78723923e-01  2.71118880e-01]\n",
      " [ 1.68872451e-02 -7.63781841e-01  5.09026055e-02 -1.87110697e-01]\n",
      " [ 6.44035402e-02 -1.78540542e-01  2.84199854e-01  1.45689530e-01]\n",
      " [ 2.85450651e-03 -5.12095008e-02  1.29441104e-02  1.24157918e-01]\n",
      " [ 2.63196233e-01 -9.01453659e-02  1.15701928e-01  1.11152031e-01]\n",
      " [-2.68015959e-02  7.71858834e-03  3.03093319e-01  2.80576308e-01]\n",
      " [-1.09653895e-01 -3.41287880e-01  7.97790236e-02 -1.85653086e-01]\n",
      " [ 2.28952651e-01 -6.99919757e-01  2.65040825e-01  2.56950257e-01]\n",
      " [-7.75535185e-02 -4.35157721e-01  7.29909234e-02 -7.13617006e-02]\n",
      " [ 1.38349715e-01  1.76788211e-01  3.98344278e-01  5.22233032e-01]\n",
      " [ 1.13479346e-01 -2.29727168e-01  7.13778835e-02  8.03628720e-02]\n",
      " [ 1.75237737e-01 -5.04697607e-01  3.58301938e-01  2.40836516e-01]\n",
      " [-2.53432657e-02 -2.89732860e-01  2.52277183e-01 -2.42489158e-02]\n",
      " [ 1.46947975e-01 -1.93328107e-01  1.08985094e-01  6.06923113e-02]\n",
      " [ 2.23802154e-01 -1.12488588e-01  1.25347789e-01  1.37438648e-01]\n",
      " [ 2.45035640e-01 -2.95369486e-01  2.17290661e-01  1.16383288e-01]\n",
      " [ 3.10989142e-01 -7.33273211e-02  3.36916810e-01  3.83740903e-01]\n",
      " [ 1.02048186e-01 -1.29159084e-01  2.59727420e-01  2.54587726e-01]\n",
      " [-5.17330832e-02 -3.77400549e-01 -7.23339050e-02 -1.58750059e-01]\n",
      " [-8.03039699e-02 -5.31514879e-01  7.42971193e-02 -5.30206509e-02]\n",
      " [-1.13875646e-01 -5.30401105e-01  2.07661642e-02 -1.45034054e-01]\n",
      " [ 5.76640066e-03 -2.89427607e-01  6.35737836e-02  9.09984279e-03]\n",
      " [ 9.01987632e-02 -2.96853822e-01  4.56542832e-01  3.34793189e-01]\n",
      " [-7.85708496e-02  1.48246427e-03  3.37554679e-01  2.98292718e-01]\n",
      " [ 9.74699866e-02  2.88559337e-01  2.55948418e-01  3.36070535e-01]\n",
      " [ 2.43662785e-01 -3.04903160e-02  2.21535615e-01  2.02987391e-01]\n",
      " [ 1.66123491e-01 -6.53557420e-01  1.77824394e-01  6.21812833e-02]\n",
      " [-5.81951291e-02 -3.41865963e-02  1.51824668e-01  1.03156925e-01]\n",
      " [-1.77551807e-02 -4.33491885e-01  1.59572445e-01  1.25137756e-01]\n",
      " [-1.30815405e-01 -3.64657858e-01  2.42256781e-01  1.31220040e-02]\n",
      " [ 5.70272731e-02 -7.34206698e-02  2.52191776e-01  1.49544236e-01]\n",
      " [ 4.20138645e-03 -3.72916577e-01  9.37253709e-02  6.82240586e-03]\n",
      " [-1.82428666e-01 -5.44251770e-01 -3.79309841e-02 -1.02765555e-01]\n",
      " [-4.44884176e-02 -2.54694688e-01  1.85851656e-01  1.05954378e-01]\n",
      " [-9.15970160e-02 -5.38261549e-02  1.45394362e-01 -2.17418343e-03]\n",
      " [-3.61622708e-02 -1.09148160e-01  1.66078278e-01  9.38178057e-02]\n",
      " [ 9.35161697e-02 -1.84575776e-01  1.45797582e-01  6.06589556e-02]\n",
      " [-1.01374784e-01 -3.16000064e-01 -1.38805449e-01 -1.17510300e-02]\n",
      " [-1.60545177e-02 -1.76936374e-01  1.42744704e-01  9.80745652e-02]\n",
      " [ 4.01981028e-01  2.92186470e-01  8.20317908e-01  1.11546679e+00]\n",
      " [ 1.71652768e-01 -1.81467378e-01  5.01311291e-01  5.73476615e-01]\n",
      " [ 5.02999705e-01 -1.79795986e-01  7.05925369e-01  7.93927108e-01]\n",
      " [ 1.80310524e-01 -1.70922232e-01  6.04446971e-01  4.99731565e-01]\n",
      " [ 3.85793203e-01 -3.69544203e-02  6.99057924e-01  8.35154319e-01]\n",
      " [ 5.39481471e-01 -2.75960076e-01  8.28088222e-01  7.34577080e-01]\n",
      " [-9.94371398e-02 -3.49607178e-01  5.10088310e-01  5.70057935e-01]\n",
      " [ 3.51840171e-01 -3.47298030e-01  7.46704209e-01  5.09545153e-01]\n",
      " [ 3.10040122e-01 -5.01297987e-01  5.97249951e-01  4.62035240e-01]\n",
      " [ 6.27072238e-01  4.40053315e-01  7.09661091e-01  1.04356346e+00]\n",
      " [ 3.64324306e-01  1.18809135e-01  4.54563838e-01  6.66993549e-01]\n",
      " [ 3.14330202e-01 -2.96953017e-01  5.26345695e-01  5.86255118e-01]\n",
      " [ 4.70152648e-01 -5.79433777e-02  5.46725373e-01  7.22178955e-01]\n",
      " [ 1.86064800e-01 -4.24094986e-01  6.16431940e-01  8.03866082e-01]\n",
      " [ 3.92580367e-01 -5.05051418e-02  6.54634952e-01  1.05724227e+00]\n",
      " [ 4.35322581e-01  1.88095923e-01  5.38523183e-01  8.38357782e-01]\n",
      " [ 2.63196198e-01 -1.04794037e-01  5.89450176e-01  5.90951518e-01]\n",
      " [ 5.83415744e-01  3.90408545e-01  9.39356441e-01  1.15756442e+00]\n",
      " [ 6.99763466e-01 -5.67156862e-01  8.65105209e-01  8.69731763e-01]\n",
      " [ 1.05416609e-01 -7.11263466e-01  4.35389329e-01  2.58902463e-01]\n",
      " [ 5.43092236e-01  1.10190708e-01  6.24469943e-01  8.97581171e-01]\n",
      " [ 1.33661995e-01 -1.61174521e-01  5.98394515e-01  8.00961074e-01]\n",
      " [ 5.26919576e-01 -3.66455710e-01  7.37577574e-01  6.19889654e-01]\n",
      " [ 2.89170326e-01 -2.96503139e-01  4.13730364e-01  5.14104086e-01]\n",
      " [ 3.86492814e-01  1.97313560e-01  5.92287000e-01  7.18620079e-01]\n",
      " [ 3.99701415e-01  9.06293164e-02  4.83289040e-01  3.45033994e-01]\n",
      " [ 2.55685852e-01 -2.08127503e-01  4.03211016e-01  5.30807021e-01]\n",
      " [ 1.96214952e-01 -4.03554559e-02  4.32530673e-01  5.26172107e-01]\n",
      " [ 3.51257795e-01 -2.08326056e-01  6.58771407e-01  7.68665512e-01]\n",
      " [ 3.57664444e-01 -1.13803963e-01  3.80072607e-01  1.82929336e-01]\n",
      " [ 5.34048736e-01 -2.37085843e-01  5.14810420e-01  4.49077013e-01]\n",
      " [ 6.31458793e-01  6.49264708e-01  4.48982654e-01  4.03620663e-01]\n",
      " [ 3.86426210e-01 -1.85778324e-01  6.86857067e-01  8.77460174e-01]\n",
      " [ 1.38559698e-01 -2.63813034e-01  3.69222344e-01  1.98742665e-01]\n",
      " [-9.29610184e-04 -4.32594733e-01  5.09318266e-01  9.83977516e-02]\n",
      " [ 7.91425943e-01 -1.04071110e-01  5.66215760e-01  7.95287835e-01]\n",
      " [ 3.75499175e-01  3.00924079e-01  7.31525286e-01  1.08033304e+00]\n",
      " [ 2.12985342e-01  3.07476112e-02  5.17453195e-01  4.61650648e-01]\n",
      " [ 1.76683542e-01 -4.30089375e-02  4.26410754e-01  5.42233079e-01]\n",
      " [ 5.03443231e-01  3.03453765e-02  4.92471041e-01  7.18393208e-01]\n",
      " [ 5.40838162e-01  3.95922723e-02  6.75146621e-01  1.03014778e+00]\n",
      " [ 6.21806624e-01  3.76915924e-02  4.80984280e-01  9.29629108e-01]\n",
      " [ 1.56293016e-01 -2.86691491e-01  5.89985357e-01  6.40448485e-01]\n",
      " [ 4.82583843e-01  1.11324146e-01  6.96761449e-01  9.10989545e-01]\n",
      " [ 5.61127962e-01  2.15610514e-01  7.11728629e-01  1.09954605e+00]\n",
      " [ 5.67641915e-01 -3.49193024e-02  5.41934640e-01  9.21930471e-01]\n",
      " [ 3.48742924e-01 -4.49661846e-01  4.73348154e-01  5.77397843e-01]\n",
      " [ 3.71785313e-01 -4.62283647e-02  4.92391991e-01  6.66191102e-01]\n",
      " [ 3.62779295e-01  3.22348109e-01  6.40663070e-01  8.91760394e-01]\n",
      " [ 1.26086228e-01 -3.20842672e-02  4.92929616e-01  4.64516128e-01]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import random\n",
    "from sklearn import datasets\n",
    "from matplotlib import pyplot as plt\n",
    "with np.errstate(divide='ignore'):\n",
    "    np.float64(1.0) / 0.0\n",
    "\n",
    "def Min(mas):\n",
    "    min_val=mas[0]\n",
    "    for i in range(len(mas)):\n",
    "        if(min_val>mas[i]):\n",
    "            min_val=mas[i]\n",
    "    return min_val\n",
    "\n",
    "def Max(mas):\n",
    "    max_val=mas[0]\n",
    "    for i in range(len(mas)):\n",
    "        if(max_val<mas[i]):\n",
    "            max_val=mas[i]\n",
    "    return max_val\n",
    "\n",
    "def HyperCube(mas):\n",
    "    vec_max=list()\n",
    "    vec_min=list()\n",
    "    for i in range(len(mas[0])):\n",
    "        l=list()\n",
    "        for j in range(len(mas)):\n",
    "            l.append(mas[j][i])\n",
    "        vec_max.append(Max(l))\n",
    "        vec_min.append(Min(l))\n",
    "        \n",
    "    for i in range(len(mas[0])):\n",
    "        for j in range(len(mas)):\n",
    "            mas[j][i]=2*((mas[j][i]-vec_min[i])/(vec_max[i]-vec_min[i]))-1\n",
    "    return mas\n",
    "\n",
    "def Aver(mas):\n",
    "    x=[0 for i in range(len(mas[0]))]\n",
    "    for i in range(len(mas[0])):\n",
    "        count=0\n",
    "        for j in range(len(mas)):\n",
    "            x[i]+=mas[j][i]\n",
    "            count+=1\n",
    "        x[i]/=count\n",
    "    return x\n",
    "\n",
    "def Center(mas,x):\n",
    "    for i in range(len(mas[0])):\n",
    "        for j in range(len(mas)):\n",
    "            mas[j][i]-=x[i]\n",
    "    return mas\n",
    "\n",
    "def Norm(x):\n",
    "    _sum=0\n",
    "    for i in range(len(x)):\n",
    "        _sum+=x[i]**2\n",
    "    _sum=_sum**(1/2)\n",
    "    for i in range(len(x)):\n",
    "        x[i]/=_sum\n",
    "    return x\n",
    "def trans(mas, dem=2):\n",
    "    if(dem==2):\n",
    "        trans=list()\n",
    "        for i in range(len(mas[0])):\n",
    "            l=list()\n",
    "            for j in range(len(mas)):\n",
    "                l.append(mas[j][i])\n",
    "            trans.append(l)    \n",
    "        return np.asarray(trans)\n",
    "    else:\n",
    "        trans=list()\n",
    "        a=True\n",
    "        for i in range(len(mas)):\n",
    "            l=list()\n",
    "            a=True\n",
    "            while(a):\n",
    "                l.append(mas[i])\n",
    "                a=False\n",
    "            trans.append(l)\n",
    "        return np.asarray(trans)\n",
    "def div(a,b,dem=1):\n",
    "    if(dem==1):#vec/number\n",
    "        x=[None for y in range(len(a))]\n",
    "        for i in range(len(a)):\n",
    "            x[i]=a[i]/b\n",
    "        return x\n",
    "def sub(a,b,dem=1):\n",
    "    if(dem==1):#vec - vec\n",
    "        x=[None for y in range(len(a))]\n",
    "        for i in range(len(a)):\n",
    "            x[i]=a[i]-b[i]\n",
    "        return x\n",
    "def add(a,b,dem=1):\n",
    "    if(dem==1):#vec + vec\n",
    "        x=[None for y in range(len(b))]\n",
    "        for i in range(len(b)):\n",
    "            x[i]=a[i]+b[i]\n",
    "        return x\n",
    "def mul(a,b,dem=2):\n",
    "    if(dem==1):\n",
    "        x=[[None for y in range(len(b))] for x in range(len(a))]\n",
    "        for i in range(len(a)):\n",
    "            for j in range(len(b)):\n",
    "                x[i][j]=a[i]*b[j]\n",
    "        return x\n",
    "    elif(dem==3):\n",
    "        x=[0 for i in range(len(a))]\n",
    "        for i in range(len(a)):\n",
    "            for j in range(len(b)):\n",
    "                x[i]+=a[i][j]*b[j]\n",
    "        return x\n",
    "#     elif(dem==2 and len(a[0])==len(b)):\n",
    "#         x=[[None for y in range(len(b[0]))] for x in range(len(a))]\n",
    "#         for i in range(len(a)):\n",
    "#             for j in range(len(b[0])):\n",
    "#                 x[i][j]=0\n",
    "#                 for k in range(len(a[0])):\n",
    "#                     x[i][j]+=a[i][k]*b[k][j]\n",
    "#         return x\n",
    "    elif(dem==4):\n",
    "        x=0\n",
    "        for i in range(len(a)):\n",
    "            x+=a[i]*b[i]\n",
    "        return x\n",
    "    elif(dem==5):#for number * vec\n",
    "        x=[None for y in range(len(b))]\n",
    "        for i in range(len(b)):\n",
    "            x[i]=b[i]*a\n",
    "        return x\n",
    "    else: return 'Wrong data demensions'\n",
    "data=datasets.load_iris()\n",
    "data=data.data\n",
    "HyperCube(data)\n",
    "averData=Aver(data)\n",
    "Center(data,averData)\n",
    "\n",
    "def Oj(x,y,w,j,vec):\n",
    "    if(j==0):\n",
    "        vec.append(w)\n",
    "        Oj(x,y,w,j+1,vec)\n",
    "    elif(j<len(x)):\n",
    "        w_n=add(w,div(mul(y[j-1],sub(data[j-1],mul(y[j-1],w,dem=5)),dem=5),1))\n",
    "        Norm(w_n)\n",
    "        vec.append(w_n)\n",
    "        Oj(x,y,w_n,j+1,vec)\n",
    "    return vec\n",
    "\n",
    "def Ans(x,y,w):\n",
    "    a=[[None for y in range(len(x[0]))]for i in range(len(x))]\n",
    "    for i in range(len(x)):\n",
    "        a[i]=sub(x[i],mul(y[i],w[i],dem=5))\n",
    "    return a\n",
    "\n",
    "ans=[[None for y in range(len(data[0]))]for i in range(len(data))]\n",
    "for j in range(len(data)):\n",
    "    w=[1 for i in range(4)]\n",
    "    for i in range(len(w)):\n",
    "        w[i]=random.uniform(-1,1)\n",
    "    Norm(w)\n",
    "\n",
    "    y=[None for i in range(len(data))]\n",
    "    for i in range(len(data)):\n",
    "        y[i]=mul(w,data[i],dem=4)\n",
    "    \n",
    "    vec=list()\n",
    "    w_n=Oj(data,y,w,0,vec)\n",
    "    ans[j]=sub(data[j],mul(y[j],w_n[j],dem=5))\n",
    "    ans=np.array(Ans(data,y,w_n))\n",
    "\n",
    "ans=np.array(ans)\n",
    "print(ans)\n",
    "plt.plot(data[1:50,2],data[1:50,3],'o',c='red')\n",
    "plt.plot(data[51:100,2],data[51:100,3],'o')\n",
    "plt.plot(data[101:150,2],data[101:150,3],'o',c='green')\n",
    "plt.show()\n",
    "plt.plot(ans[1:50,0],ans[1:50,1],'o',c='red')\n",
    "plt.plot(ans[51:100,0],ans[51:100,1],'o')\n",
    "plt.plot(ans[101:150,0],ans[101:150,1],'o',c='green')\n",
    "plt.show()\n",
    "\n",
    "\n",
    "# import pandas as pd\n",
    "# url = \"https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data\"\n",
    "# # load dataset into Pandas DataFrame\n",
    "# df = pd.read_csv(url, names=['sepal length','sepal width','petal length','petal width','target'])\n",
    "# from sklearn.preprocessing import StandardScaler\n",
    "# features = ['sepal length', 'sepal width', 'petal length', 'petal width']\n",
    "# # Separating out the features\n",
    "# x = df.loc[:, features].values\n",
    "# # Separating out the target\n",
    "# y = df.loc[:,['target']].values\n",
    "# # Standardizing the features\n",
    "# x = StandardScaler().fit_transform(x)\n",
    "# \n",
    "# from sklearn.decomposition import PCA\n",
    "# pca = PCA(n_components=2)\n",
    "# principalComponents = pca.fit_transform(x)\n",
    "# principalDf = pd.DataFrame(data = principalComponents\n",
    "#              , columns = ['principal component 1', 'principal component 2'])\n",
    "# principalDf['principal component 1']\n",
    "# # plt.plot(principalDf['principal component 1'],principalDf['principal component 2'],'o')\n",
    "# plt.plot(principalDf['principal component 1'][1:50,0],principalDf['principal component 2'][1:50,1],'o',c='red')\n",
    "# plt.plot(principalDf['principal component 1'][51:100,0],principalDf['principal component 2'][51:100,1],'o')\n",
    "# plt.plot(principalDf['principal component 1'][101:150,0],principalDf['principal component 2'][101:150,1],'o',c='green')\n",
    "# plt.show()\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  },
  "pycharm": {
   "stem_cell": {
    "cell_type": "raw",
    "source": [],
    "metadata": {
     "collapsed": false
    }
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}